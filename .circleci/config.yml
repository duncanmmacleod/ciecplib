# -- templates --------------

aliases:
  - &attach_workspace
      attach_workspace:
        at: .

  - &store_deb_artifacts
      store_artifacts:
        path: "*.deb"

  - &store_rpm_artifacts
      store_artifacts:
        path: "*.rpm"

  - &store_test_results
      store_test_results:
        path: tests

  - &store_test_artifacts
      store_artifacts:
        path: tests

  - &install
      run:
        name: Install tarball
        command: python -m pip install --progress-bar=off $(echo ciecplib-*.tar.*)[test]

  - &install_build_dependencies
      run:
        name: Install build dependencies
        command: |
          set -x;
          apt-get -yqq update;
          apt-get -yqq install swig;

  - &debian_configure
      run:
        name: Configure debian
        command: |
          apt-get -yqq update;
          apt-get -yqq install ca-certificates;

  - &debian_fetch_requests_ecp
      run:
        name: Fetch requests-ecp
        command: |
          apt-get -yqq update;
          apt-get -yqq install base-files curl dpkg lsb-release;
          eval $(cat /etc/os-release);
          CODENAME=$(lsb_release --codename --short);
          if [[ ${CODENAME} = "bullseye" ]]; then VERSION_ID="11"; fi;
          DEB="python3-requests-ecp_0.2.1-1+deb${VERSION_ID}u0_all.deb";
          curl -LO https://hypatia.aei.mpg.de/lsc-amd64-${CODENAME}/${DEB};
          dpkg --info ${DEB};
          dpkg --install ${DEB} || { \
              apt-get -y -f install;
              dpkg --install ${DEB};
          };
          rm -fv ${DEB};

  - &debian_build
      run:
        name: Build
        command: |
          set -x;
          apt-get -yqq update;
          apt-get -yqq install \
              dpkg-dev \
              devscripts \
              python${PYTHON_VERSION:0:1}-pip \
          ;
          pushd $(mktemp -d -p .);
          tar -xf ../ciecplib-*.tar.* --strip-components=1;
          # install build dependencies
          mk-build-deps --tool "apt-get -y" --install --remove;
          # build binary package
          dpkg-buildpackage -us -uc -b;
          popd;
          ls *.deb | xargs -n1 dpkg --info;
          # mv and install
          rm -rf tmp*;

  - &debian_install
      run:
        name: Install
        command: |
          dpkg --install python${PYTHON_VERSION:0:1}-ciecplib*.deb ciecp-utils*.deb || { \
              apt-get -y -f install;
              dpkg --install python${PYTHON_VERSION:0:1}-ciecplib*.deb ciecp-utils*.deb;
          };

  - &centos_fetch_requests_ecp
      run:
        name: Fetch requests-ecp
        command: |
          set -x;
          yum -y -q update;
          yum -y -q install curl epel-release;
          DIST_SUFFIX=$(rpm --eval "%{dist}");
          RPM="python3-requests-ecp-0.2.1-1${DIST_SUFFIX}.noarch.rpm";
          curl -LO https://koji.ligo-la.caltech.edu/kojifiles/packages/requests-ecp/0.2.1/1${DIST_SUFFIX}/noarch/${RPM};
          yum -y --nogpgcheck localinstall ${RPM};
          rm -fv ${RPM};

  - &centos_build
      run:
        name: Build
        command: |
          set -x;
          yum -y -q update;
          yum -y -q install epel-release;
          yum -y -q install \
              rpm-build \
              yum-utils \
              python-srpm-macros \
              python3-rpm-macros \
              python3-pip \
          ;
          # build src rpm
          SRPM=$(rpmbuild --define "_topdir $(pwd)" -ts ./ciecplib-*.tar.* | cut -d\  -f2);
          # install build dependencies
          yum-builddep -y -q ${SRPM};
          # build binary rpm(s)
          rpmbuild --define "_rpmdir $(pwd)" --rebuild ${SRPM};
          # install
          mv */*.rpm .;
          for _rpm in *.rpm; do
              echo "-- RPM summary for ${_rpm}";
              echo "- Contents:"
              rpm -qilp ${_rpm};
              echo "- Provides:"
              rpm -qp --provides ${_rpm};
              echo "- Requires:"
              rpm -qp --requires ${_rpm};
          done;
          # remove epel
          yum -y -q remove epel-release;

  - &centos_install
      run:
        name: Install
        command: |
          yum -y --nogpgcheck localinstall ./python*ciecplib*.rpm ./ciecp-utils*.rpm;

  - &debian_install_test_dependencies
      run:
        name: Install test dependencies
        command: |
          apt-get -yqq install \
              debianutils \
              python${PYTHON_VERSION:0:1}-pytest \
              python${PYTHON_VERSION:0:1}-pytest-cov \
              python${PYTHON_VERSION:0:1}-requests-mock \
          ;

  - &centos_install_test_dependencies
      run:
        name: Install test dependencies
        command: |
          PYXY="${PYTHON_VERSION:0:1}";
          yum -y -q install epel-release;
          yum -y -q install \
              which \
              python${PYTHON_VERSION:0:1}-pytest \
              python${PYTHON_VERSION:0:1}-pytest-cov \
              python${PYTHON_VERSION:0:1}-requests-mock \
          ;

  - &test
      run:
        name: Test
        command: |
          set -x;
          # install test requirements
          python${PYTHON_VERSION} -m pip install --upgrade pip
          python${PYTHON_VERSION} -m pip install -r requirements-test.txt
          # run test suite
          mkdir -pv tests;
          pushd tests;
          python${PYTHON_VERSION} -m pytest \
              --pyargs ciecplib \
              --cov ciecplib \
              --junitxml junit.xml \
          ;
          # test --help for scripts
          for script in $(python${PYTHON_VERSION} -c "import pkg_resources as pkgr; [print(x.name) for x in pkgr.iter_entry_points('console_scripts') if x.dist.project_name == 'ciecplib']"); do
              python${PYTHON_VERSION} -m coverage run \
                  --append \
                  --rcfile ../setup.cfg \
                  $(which ${script}) --version;
          done

  - &coverage_report
      run:
        name: Coverage report
        command: pushd tests && python${PYTHON_VERSION} -m coverage report --show-missing

  - &codecov
      run:
        name: Submit coverage to codecov
        command: |
          # get OS name from CIRCLE_JOB name (ignore if in a python image)
          export IMAGE=$(python${PYTHON_VERSION} -c "print('${CIRCLE_JOB}'.split(':')[-2])")
          if [[ "${IMAGE}" == "python" ]]; then unset IMAGE; fi
          # install codecov
          python${PYTHON_VERSION} -m pip install codecov
          # upload coverage
          python${PYTHON_VERSION} -m codecov --file tests/.coverage --flags $(uname) python${PYTHON_VERSION/./} ${IMAGE}

  - &debian
      steps:
        - checkout
        - *debian_configure
        - *attach_workspace
        - *debian_fetch_requests_ecp
        - *debian_build
        - *debian_install
        - *debian_install_test_dependencies
        - *test
        - *coverage_report
        - *codecov
        - *store_test_results
        - *store_test_artifacts
        - *store_deb_artifacts

  - &centos
      steps:
        - checkout
        - *attach_workspace
        - *centos_fetch_requests_ecp
        - *centos_build
        - *centos_install
        - *centos_install_test_dependencies
        - *test
        - *coverage_report
        - *codecov
        - *store_test_results
        - *store_test_artifacts
        - *store_rpm_artifacts

  - &python
      steps:
        - checkout
        - *attach_workspace
        - *install_build_dependencies
        - *install
        - *test
        - *coverage_report
        - *codecov
        - *store_test_results
        - *store_test_artifacts

# -- jobs -------------------

version: 2
jobs:
  sdist:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: Build tarball
          command: python setup.py --quiet sdist --dist-dir .
      - persist_to_workspace:
          root: .
          paths:
            - "ciecplib-*.tar.gz"

  flake8:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: Lint
          command: |
            set -ex;
            python -m pip install --progress-bar=off "flake8>=3.7.0";
            mkdir -pv tests;
            python -m flake8 --output-file tests/flake8.txt;
      - run:
          name: Create flake8 report
          when: always
          command: |
            set -ex;
            python -m pip install --progress-bar=off flake8-junit-report;
            python -m junit_conversor tests/flake8.txt tests/junit.xml;
      - *store_test_results
      - *store_test_artifacts

  debian:buster:3.7:
    <<: *debian
    docker:
      - image: debian:buster-backports
    environment:
      PYTHON_VERSION: "3.7"

  debian:bullseye:3.8:
    <<: *debian
    docker:
      - image: debian:bullseye
    environment:
      PYTHON_VERSION: "3.8"

  rhel:centos8:3.6:
    <<: *centos
    docker:
      - image: centos:8
    environment:
      PYTHON_VERSION: "3.6"

  python:3.5:
    <<: *python
    docker:
      - image: python:3.5-buster
    environment:
      PYTHON_VERSION: "3.5"

  python:3.6:
    <<: *python
    docker:
      - image: python:3.6-buster
    environment:
      PYTHON_VERSION: "3.6"

  python:3.7:
    <<: *python
    docker:
      - image: python:3.7-buster
    environment:
      PYTHON_VERSION: "3.7"

  python:3.8:
    <<: *python
    docker:
      - image: python:3.8-buster
    environment:
      PYTHON_VERSION: "3.8"

  sphinx:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - *install_build_dependencies
      - run:
          name: Install
          command: python -m pip install --progress-bar=off .[docs]
      - run:
          name: Run sphinx-build
          command: pushd docs && python -m sphinx -M html . _build -E -W

# -- workflow ---------------

workflows:
  version: 2
  build_and_test:
    jobs:
      # -- stage 1
      - sdist
      - flake8
      - sphinx
      # -- stage 2
      - rhel:centos8:3.6:
          requires:
            - sdist
      - debian:buster:3.7:
          requires:
            - sdist
      - debian:bullseye:3.8:
          requires:
            - sdist
      - python:3.5:
          requires:
            - sdist
      - python:3.6:
          requires:
            - sdist
      - python:3.7:
          requires:
            - sdist
      - python:3.8:
          requires:
            - sdist
